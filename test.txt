=================
##################################
./MANIFEST.in
##################################

include README.md
include LICENSE
recursive-include src/codeaggregator/data *


##################################
./tox.ini
##################################

[tox]
envlist = py38, py39, py310

[testenv]
deps = 
    pytest
    coverage
commands = 
    pytest --cov=codeaggregator tests/


##################################
./test.txt
##################################



##################################
./project.toml
##################################

[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"


##################################
./setup.py
##################################

from setuptools import setup, find_packages

setup(
    name='CodeAggregator',
    version='0.1.0',
    author='kentyisapen',
    author_email='kenkenpoco@gmail.com',
    description='生成AI用にコードファイルをまとめて出力するツール',
    long_description=open('docs/README.md').read(),
    long_description_content_type='text/markdown',
    url='https://github.com/kentyisapen/code-aggregator',
    packages=find_packages(where='src'),
    package_dir={'': 'src'},
    entry_points={
        'console_scripts': [
            'code-aggregator=codeaggregator.cli:main',
        ],
    },
    install_requires=[
        # 必要な依存関係をここに記載
    ],
    classifiers=[
        'Programming Language :: Python :: 3',
        'License :: OSI Approved :: MIT License',
        'Operating System :: OS Independent',
    ],
    python_requires='>=3.7',
)


##################################
./requirements.txt
##################################



##################################
./docs/README.md
##################################

# CodeAggregator

CodeAggregatorは、生成AI用にコードファイルをまとめて標準出力に出力するツールです。特定の拡張子パターンやディレクトリパターンに基づいて対象ファイルを検索し、各ファイルのパスと内容を指定フォーマットで出力します。

## インストール方法

```bash
git clone https://github.com/kentyisapen/code-aggregator.git
cd code-aggregator
pip install -e .
```

## 使用方法

### デフォルト

すべてのファイルについてカレントから捜査し統合する

```bash
codeaggregator .
```

### -P オプション

検索対象のファイルパターンを指定する

```bash
codeaggregator . -P "*.py"
codeaggregator . -P "*.py|*.txt"
```

### -I オプション

検索除外対象のファイルパターンを指定する
-Pオプションと同時に利用した場合、-Pで検索したのち、-Iで除外される

```bash
codeaggregator . -I "node_modules/"
```

### --gitignore

.gitignoreファイルをもとに除外ファイルを自動的に設定する

```bash
codeaggregator . --gitignore
```

##################################
./src/codeaggregator/utils.py
##################################

#

##################################
./src/codeaggregator/cli.py
##################################

# ./src/codeaggregator/cli.py

import argparse
from codeaggregator.finder import find_files
from codeaggregator.output import output_files

def main():
    parser = argparse.ArgumentParser(
        description='生成AI用にコードファイルをまとめて出力するツール'
    )
    # 'directory' 引数をオプションの位置引数に変更
    parser.add_argument(
        'directory',
        nargs='?',  # 0または1の引数を受け取る
        default='.',  # デフォルト値をカレントディレクトリに設定
        help='検索対象のディレクトリ (デフォルト: カレントディレクトリ)'
    )
    parser.add_argument(
        '-P', '--pattern',
        help='対象とするファイルパターンを指定（カンマ区切り） (例: *.py,*.txt)'
    )
    parser.add_argument(
        '-I', '--ignore',
        help='除外するファイル/ディレクトリパターンを指定（カンマ区切り） (例: node_modules/,__pycache__/)'
    )
    parser.add_argument(
        '--gitignore',
        action='store_true',
        help='.gitignoreを基に除外パターンを適用'
    )
    parser.add_argument(
        '-a', '--all',
        action='store_true',
        help='隠しファイルやフォルダも含める'
    )
    parser.add_argument(
        '-o', '--output',
        help='出力先を指定（デフォルトは標準出力）'
    )
    parser.add_argument(
        '-v', '--version',
        action='version',
        version='CodeAggregator 0.1.0',
        help='バージョン情報を表示'
    )

    args = parser.parse_args()

    # パターンをリストに変換
    patterns = args.pattern.split(',') if args.pattern else None
    ignore_patterns = args.ignore.split(',') if args.ignore else None

    # ファイル検索
    files = find_files(
        directory=args.directory,
        patterns=patterns,
        ignore_patterns=ignore_patterns,
        use_gitignore=args.gitignore,
        include_hidden=args.all  # -a オプションに基づき隠しファイルを含める
    )

    # 検索結果の出力
    output_files(files, args.output)


##################################
./src/codeaggregator/output.py
##################################

def output_files(files, output_destination=None):
    output = []
    output.append("=" * 17)
    for file in files:
        output.append(f"##################################\n{file}\n##################################\n")
        try:
            with open(file, 'r', encoding='utf-8') as f:
                content = f.read()
            output.append(content + "\n")
        except Exception as e:
            output.append(f"Error reading {file}: {e}\n")
    output.append("=" * 17)
    output_str = "\n".join(output)
    
    if output_destination:
        try:
            with open(output_destination, 'w', encoding='utf-8') as f:
                f.write(output_str)
        except Exception as e:
            print(f"Error writing to {output_destination}: {e}")
    else:
        print(output_str)


##################################
./src/codeaggregator/finder.py
##################################

# ./src/codeaggregator/finder.py

import os
import fnmatch
from pathlib import Path
import logging

# ロガーの設定
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def load_gitignore(directory):
    """
    指定されたディレクトリから .gitignore ファイルを読み込み、パターンをリストとして返します。
    """
    gitignore_path = Path(directory) / '.gitignore'
    patterns = []
    if gitignore_path.exists():
        with open(gitignore_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    # 末尾のスラッシュを除去
                    if line.endswith('/'):
                        line = line.rstrip('/')
                    patterns.append(line)
    return patterns

def normalize_patterns(patterns):
    """
    パターンの末尾に '/' があれば除去します。
    """
    normalized = []
    for pat in patterns:
        if pat.endswith('/'):
            pat = pat.rstrip('/')
        normalized.append(pat)
    return normalized

def expand_or_patterns(patterns):
    """
    パターン内の '|' を分割し、フラットなパターンリストを返します。
    例: ["*.py|*.txt", "*.md"] -> ["*.py", "*.txt", "*.md"]
    """
    expanded = []
    for pat in patterns:
        split_pats = pat.split('|')
        expanded.extend(split_pats)
    return expanded

def find_files(directory, patterns=None, ignore_patterns=None, use_gitignore=False, include_hidden=False):
    """
    指定されたディレクトリ内のファイルを検索します。

    Args:
        directory (str): 検索対象のディレクトリパス。
        patterns (list, optional): インクルードするファイルパターンのリスト。デフォルトは None（すべてのファイルを含む）。
        ignore_patterns (list, optional): 除外するファイル/ディレクトリパターンのリスト。デフォルトは None。
        use_gitignore (bool, optional): .gitignore のパターンを除外に使用するかどうか。デフォルトは False。
        include_hidden (bool, optional): 先頭に '.' が付くファイルやフォルダを含めるかどうか。デフォルトは False。

    Returns:
        list: マッチしたファイルのパスのリスト。
    """
    matched_files = []
    ignore = []

    # 隠しファイル/フォルダを除外するパターンを追加
    if not include_hidden:
        ignore.append('.*')  # 先頭に '.' が付くファイルやフォルダを無視

    # 追加の除外パターンがあれば正規化して追加
    if ignore_patterns:
        normalized_ignore = normalize_patterns(ignore_patterns)
        ignore += normalized_ignore
        logger.debug(f"Normalized ignore patterns: {normalized_ignore}")

    # .gitignore のパターンを除外に追加
    if use_gitignore:
        gitignore_patterns = load_gitignore(directory)
        ignore += gitignore_patterns
        logger.debug(f"Loaded .gitignore patterns: {gitignore_patterns}")

    # パターンの展開（ORパターンを分割）
    if patterns:
        expanded_patterns = expand_or_patterns(patterns)
        patterns = expanded_patterns
        logger.debug(f"Expanded include patterns: {patterns}")

    # エクスクルードパターンも展開（必要に応じて）
    if ignore:
        expanded_ignore = expand_or_patterns(ignore)
        ignore = expanded_ignore
        logger.debug(f"Expanded ignore patterns: {ignore}")

    logger.info(f"Final include patterns: {patterns}")
    logger.info(f"Final ignore patterns: {ignore}")

    for root, dirs, files in os.walk(directory):
        # 除外ディレクトリの処理
        dirs_to_remove = []
        for d in dirs:
            # ディレクトリ名のみでマッチング
            if any(fnmatch.fnmatch(d, pat) for pat in ignore):
                dirs_to_remove.append(d)
                logger.debug(f"Excluding directory: {os.path.join(root, d)}")
        for d in dirs_to_remove:
            dirs.remove(d)

        for file in files:
            file_path = os.path.join(root, file)
            relative_path = os.path.relpath(file_path, directory)

            # インクルードパターンの適用
            if patterns:
                if not any(fnmatch.fnmatch(file, pat) for pat in patterns):
                    logger.debug(f"Excluded by include pattern: {relative_path}")
                    continue  # インクルードパターンに一致しない場合、スキップ

            # エクスクルードパターンの適用
            if ignore:
                if any(fnmatch.fnmatch(relative_path, pat) for pat in ignore):
                    logger.debug(f"Excluded by ignore pattern: {relative_path}")
                    continue  # エクスクルードパターンに一致する場合、スキップ

            matched_files.append(file_path)
            logger.info(f"Included: {relative_path}")

    return matched_files


##################################
./tests/test_finder_hidden.py
##################################

# ./tests/test_finder_hidden.py

import unittest
import os
from codeaggregator.finder import find_files

class TestFinderHidden(unittest.TestCase):
    def setUp(self):
        # テスト用の一時ディレクトリを作成
        self.test_dir = 'test_env_hidden'
        os.makedirs(self.test_dir, exist_ok=True)
        
        # テストファイルとディレクトリを作成
        os.makedirs(os.path.join(self.test_dir, 'src'), exist_ok=True)
        os.makedirs(os.path.join(self.test_dir, '.hidden_dir'), exist_ok=True)
        
        with open(os.path.join(self.test_dir, 'src', 'file1.py'), 'w') as f:
            f.write('print("Hello, World!")')
        with open(os.path.join(self.test_dir, 'src', 'file2.js'), 'w') as f:
            f.write('console.log("Hello, World!");')
        with open(os.path.join(self.test_dir, 'src', 'file3.txt'), 'w') as f:
            f.write('This is a text file.')
        with open(os.path.join(self.test_dir, '.hidden_file'), 'w') as f:
            f.write('This is a hidden file.')
        with open(os.path.join(self.test_dir, '.hidden_dir', 'hidden_inside.py'), 'w') as f:
            f.write('print("Hidden inside directory")')
    
    def tearDown(self):
        # テスト用の一時ディレクトリを削除
        for root, dirs, files in os.walk(self.test_dir, topdown=False):
            for file in files:
                os.remove(os.path.join(root, file))
            for dir in dirs:
                os.rmdir(os.path.join(root, dir))
        os.rmdir(self.test_dir)
    
    def test01_hidden_directories_excluded(self):
        """
        隠しディレクトリ（例: .hidden_dir）および隠しファイル（例: .hidden_file）が正しく除外されることを確認します。
        """
        files = find_files(
            directory=self.test_dir,
            patterns=None,
            ignore_patterns=None,
            use_gitignore=False,
            include_hidden=False
        )
        expected = [
            os.path.join(self.test_dir, 'src', 'file1.py'),
            os.path.join(self.test_dir, 'src', 'file2.js'),
            os.path.join(self.test_dir, 'src', 'file3.txt'),
            # .hidden_file と .hidden_dir/hidden_inside.py は除外されるべき
        ]
        self.assertEqual(sorted(files), sorted(expected))
    
    def test02_include_hidden_with_a_option(self):
        """
        -a オプションを使用し、先頭に '.' が付くファイルやフォルダも含めることを確認します。
        """
        files = find_files(
            directory=self.test_dir,
            patterns=None,
            ignore_patterns=None,
            use_gitignore=False,
            include_hidden=True
        )
        expected = [
            os.path.join(self.test_dir, '.hidden_file'),
            os.path.join(self.test_dir, '.hidden_dir', 'hidden_inside.py'),
            os.path.join(self.test_dir, 'src', 'file1.py'),
            os.path.join(self.test_dir, 'src', 'file2.js'),
            os.path.join(self.test_dir, 'src', 'file3.txt'),
        ]
        self.assertEqual(sorted(files), sorted(expected))
    
    def test03_include_hidden_with_patterns(self):
        """
        -P "*.py", "*.txt" -a オプションを使用し、インクルードパターンと共に隠しファイル/ディレクトリも含めることを確認します。
        """
        files = find_files(
            directory=self.test_dir,
            patterns=["*.py", "*.txt"],
            ignore_patterns=None,
            use_gitignore=False,
            include_hidden=True
        )
        expected = [
            os.path.join(self.test_dir, '.hidden_dir', 'hidden_inside.py'),
            os.path.join(self.test_dir, 'src', 'file1.py'),
            os.path.join(self.test_dir, 'src', 'file3.txt'),
            os.path.join(self.test_dir, 'src', 'file2.js'),  # *.js はパターンに含まれないため除外
        ]
        # *.js はパターンに含まれないため除外
        expected_filtered = [
            os.path.join(self.test_dir, '.hidden_dir', 'hidden_inside.py'),
            os.path.join(self.test_dir, 'src', 'file1.py'),
            os.path.join(self.test_dir, 'src', 'file3.txt'),
        ]
        self.assertEqual(sorted(files), sorted(expected_filtered))

if __name__ == '__main__':
    unittest.main()


##################################
./tests/test_finder_gitignore.py
##################################

# ./tests/test_finder_gitignore.py

import unittest
import os
from codeaggregator.finder import find_files

class TestFinderGitignore(unittest.TestCase):
    def setUp(self):
        # テスト用の一時ディレクトリを作成
        self.test_dir = 'test_env_gitignore'
        os.makedirs(self.test_dir, exist_ok=True)
        
        # テストファイルとディレクトリを作成
        os.makedirs(os.path.join(self.test_dir, 'src'), exist_ok=True)
        os.makedirs(os.path.join(self.test_dir, 'node_modules'), exist_ok=True)
        os.makedirs(os.path.join(self.test_dir, 'tests', '__pycache__'), exist_ok=True)
        
        with open(os.path.join(self.test_dir, 'src', 'file1.py'), 'w') as f:
            f.write('print("Hello, World!")')
        with open(os.path.join(self.test_dir, 'src', 'file2.js'), 'w') as f:
            f.write('console.log("Hello, World!");')
        with open(os.path.join(self.test_dir, 'src', 'file3.txt'), 'w') as f:
            f.write('This is a text file.')
        with open(os.path.join(self.test_dir, 'node_modules', 'file4.py'), 'w') as f:
            f.write('print("This should be ignored")')
        with open(os.path.join(self.test_dir, 'tests', '__pycache__', 'cached_file.pyc'), 'w') as f:
            f.write('This is a cached file.')
        with open(os.path.join(self.test_dir, 'tests', 'test1.py'), 'w') as f:
            f.write('def test_example(): pass')
        with open(os.path.join(self.test_dir, '.gitignore'), 'w') as f:
            f.write('*.js\nnode_modules/\n__pycache__/\n')
    
    def tearDown(self):
        # テスト用の一時ディレクトリを削除
        for root, dirs, files in os.walk(self.test_dir, topdown=False):
            for file in files:
                os.remove(os.path.join(root, file))
            for dir in dirs:
                os.rmdir(os.path.join(root, dir))
        os.rmdir(self.test_dir)
    
    def test01_gitignore_excludes_patterns(self):
        """
        --gitignore オプションを使用し、.gitignore ファイルのパターンに基づいてファイルを除外することを確認します。
        .gitignore 自体は含まれることを確認します。
        """
        files = find_files(
            directory=self.test_dir,
            patterns=None,
            ignore_patterns=None,
            use_gitignore=True,
            include_hidden=False
        )
        expected = [
            os.path.join(self.test_dir, 'src', 'file1.py'),
            os.path.join(self.test_dir, 'src', 'file3.txt'),
            os.path.join(self.test_dir, 'tests', 'test1.py'),
            # node_modules/file4.py と tests/__pycache__/cached_file.pyc は除外されるべき
            # .gitignore自体は隠しファイルなのでデフォルトでは非表示
        ]
        self.assertEqual(sorted(files), sorted(expected))
    
    def test02_gitignore_with_patterns(self):
        """
        -P "*.py", "*.txt" --gitignore オプションを使用し、インクルードパターンと .gitignore の除外パターンが正しく適用されることを確認します。
        """
        files = find_files(
            directory=self.test_dir,
            patterns=["*.py", "*.txt"],
            ignore_patterns=None,
            use_gitignore=True,
            include_hidden=False
        )
        expected = [
            os.path.join(self.test_dir, 'src', 'file1.py'),
            os.path.join(self.test_dir, 'src', 'file3.txt'),
            os.path.join(self.test_dir, 'tests', 'test1.py'),
            # node_modules/file4.py と tests/__pycache__/cached_file.pyc は .gitignore により除外されるため含まれません
            # .gitignore 自体は *.py や *.txt にマッチしないため除外
        ]
        self.assertEqual(sorted(files), sorted(expected))

if __name__ == '__main__':
    unittest.main()


##################################
./tests/__init__.py
##################################

# ./tests/__init__.py


##################################
./tests/test_finder_patterns.py
##################################

# ./tests/test_finder_patterns.py

import unittest
import os
from codeaggregator.finder import find_files

class TestFinderPatterns(unittest.TestCase):
    def setUp(self):
        # テスト用の一時ディレクトリを作成
        self.test_dir = 'test_env_patterns'
        os.makedirs(self.test_dir, exist_ok=True)
        
        # テストファイルとディレクトリを作成
        os.makedirs(os.path.join(self.test_dir, 'src'), exist_ok=True)
        os.makedirs(os.path.join(self.test_dir, 'src', 'subdir'), exist_ok=True)
        
        with open(os.path.join(self.test_dir, 'src', 'file1.py'), 'w') as f:
            f.write('print("Hello, World!")')
        with open(os.path.join(self.test_dir, 'src', 'file2.js'), 'w') as f:
            f.write('console.log("Hello, World!");')
        with open(os.path.join(self.test_dir, 'src', 'file3.txt'), 'w') as f:
            f.write('This is a text file.')
        with open(os.path.join(self.test_dir, 'src', 'file4.dpp'), 'w') as f:
            f.write('// DPP file')
        with open(os.path.join(self.test_dir, 'src', 'file5.wpp'), 'w') as f:
            f.write('// WPP file')
        with open(os.path.join(self.test_dir, 'src', 'file6.cpp'), 'w') as f:
            f.write('// C++ file')
    
    def tearDown(self):
        # テスト用の一時ディレクトリを削除
        for root, dirs, files in os.walk(self.test_dir, topdown=False):
            for file in files:
                os.remove(os.path.join(root, file))
            for dir in dirs:
                os.rmdir(os.path.join(root, dir))
        os.rmdir(self.test_dir)
    
    def test01_include_multiple_patterns(self):
        """
        -P "*.py", "*.txt" オプションを使用し、特定のパターンに一致するファイルのみを含めることを確認します。
        """
        files = find_files(
            directory=self.test_dir,
            patterns=["*.py", "*.txt"],
            ignore_patterns=None,
            use_gitignore=False,
            include_hidden=False
        )
        expected = [
            os.path.join(self.test_dir, 'src', 'file1.py'),
            os.path.join(self.test_dir, 'src', 'file3.txt'),
        ]
        self.assertEqual(sorted(files), sorted(expected))
    
    def test02_include_or_pattern_py_txt(self):
        """
        -P "*.py|*.txt" オプションを使用し、*.py または *.txt にマッチするファイルのみを含めることを確認します。
        """
        patterns = ["*.py|*.txt"]
        files = find_files(
            directory=self.test_dir,
            patterns=patterns,
            ignore_patterns=None,
            use_gitignore=False,
            include_hidden=False
        )
        expected = [
            os.path.join(self.test_dir, 'src', 'file1.py'),
            os.path.join(self.test_dir, 'src', 'file3.txt'),
        ]
        self.assertEqual(sorted(files), sorted(expected))
    
    def test03_include_character_class_pattern(self):
        """
        -P "*.[dwc]pp" オプションを使用し、*.dpp, *.wpp, *.cpp にマッチするファイルのみを含めることを確認します。
        """
        patterns = ["*.[dwc]pp"]
        files = find_files(
            directory=self.test_dir,
            patterns=patterns,
            ignore_patterns=None,
            use_gitignore=False,
            include_hidden=False
        )
        expected = [
            os.path.join(self.test_dir, 'src', 'file4.dpp'),
            os.path.join(self.test_dir, 'src', 'file5.wpp'),
            os.path.join(self.test_dir, 'src', 'file6.cpp'),
        ]
        self.assertEqual(sorted(files), sorted(expected))
    
    def test04_include_combined_patterns(self):
        """
        -P "*.py|*.txt", "*.[dwc]pp" オプションを使用し、*.py または *.txt または *.dpp, *.wpp, *.cpp にマッチするファイルのみを含めることを確認します。
        """
        patterns = ["*.py|*.txt", "*.[dwc]pp"]
        files = find_files(
            directory=self.test_dir,
            patterns=patterns,
            ignore_patterns=None,
            use_gitignore=False,
            include_hidden=False
        )
        expected = [
            os.path.join(self.test_dir, 'src', 'file1.py'),
            os.path.join(self.test_dir, 'src', 'file3.txt'),
            os.path.join(self.test_dir, 'src', 'file4.dpp'),
            os.path.join(self.test_dir, 'src', 'file5.wpp'),
            os.path.join(self.test_dir, 'src', 'file6.cpp'),
        ]
        self.assertEqual(sorted(files), sorted(expected))

if __name__ == '__main__':
    unittest.main()


##################################
./tests/test_finder_ignore.py
##################################

# ./tests/test_finder_ignore.py

import unittest
import os
from codeaggregator.finder import find_files

class TestFinderIgnore(unittest.TestCase):
    def setUp(self):
        # テスト用の一時ディレクトリを作成
        self.test_dir = 'test_env_ignore'
        os.makedirs(self.test_dir, exist_ok=True)
        
        # テストファイルとディレクトリを作成
        os.makedirs(os.path.join(self.test_dir, 'src'), exist_ok=True)
        os.makedirs(os.path.join(self.test_dir, 'node_modules'), exist_ok=True)
        
        with open(os.path.join(self.test_dir, 'src', 'file1.py'), 'w') as f:
            f.write('print("Hello, World!")')
        with open(os.path.join(self.test_dir, 'node_modules', 'file2.js'), 'w') as f:
            f.write('console.log("Hello, World!");')
        with open(os.path.join(self.test_dir, 'src', 'file3.txt'), 'w') as f:
            f.write('This is a text file.')
    
    def tearDown(self):
        # テスト用の一時ディレクトリを削除
        for root, dirs, files in os.walk(self.test_dir, topdown=False):
            for file in files:
                os.remove(os.path.join(root, file))
            for dir in dirs:
                os.rmdir(os.path.join(root, dir))
        os.rmdir(self.test_dir)
    
    def test01_ignore_node_modules(self):
        """
        -I "node_modules/" オプションを使用し、node_modules ディレクトリを除外することを確認します。
        """
        files = find_files(
            directory=self.test_dir,
            patterns=None,
            ignore_patterns=["node_modules/"],
            use_gitignore=False,
            include_hidden=False
        )
        expected = [
            os.path.join(self.test_dir, 'src', 'file1.py'),
            os.path.join(self.test_dir, 'src', 'file3.txt'),
            # node_modules/file2.js は除外されるべき
        ]
        self.assertEqual(sorted(files), sorted(expected))

if __name__ == '__main__':
    unittest.main()


##################################
./tests/test_finder_basic.py
##################################

# ./tests/test_finder_basic.py

import unittest
import os
from codeaggregator.finder import find_files

class TestFinderBasic(unittest.TestCase):
    def setUp(self):
        # テスト用の一時ディレクトリを作成
        self.test_dir = 'test_env_basic'
        os.makedirs(self.test_dir, exist_ok=True)
        
        # テストファイルとディレクトリを作成
        os.makedirs(os.path.join(self.test_dir, 'src'), exist_ok=True)
        
        with open(os.path.join(self.test_dir, 'src', 'file1.py'), 'w') as f:
            f.write('print("Hello, World!")')
        with open(os.path.join(self.test_dir, 'src', 'file2.js'), 'w') as f:
            f.write('console.log("Hello, World!");')
        with open(os.path.join(self.test_dir, 'src', 'file3.txt'), 'w') as f:
            f.write('This is a text file.')
    
    def tearDown(self):
        # テスト用の一時ディレクトリを削除
        for root, dirs, files in os.walk(self.test_dir, topdown=False):
            for file in files:
                os.remove(os.path.join(root, file))
            for dir in dirs:
                os.rmdir(os.path.join(root, dir))
        os.rmdir(self.test_dir)

    def test01_find_files_include_all(self):
        """
        何も指定しなければ、隠しファイルを除くすべてのファイルが含まれることを確認します。
        """
        files = find_files(
            directory=self.test_dir,
            patterns=None,
            ignore_patterns=None,
            use_gitignore=False,
            include_hidden=False
        )
        expected = [
            os.path.join(self.test_dir, 'src', 'file1.py'),
            os.path.join(self.test_dir, 'src', 'file2.js'),
            os.path.join(self.test_dir, 'src', 'file3.txt'),
        ]
        self.assertEqual(sorted(files), sorted(expected))

if __name__ == '__main__':
    unittest.main()


=================